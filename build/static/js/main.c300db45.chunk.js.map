{"version":3,"sources":["app/api/agent.ts","app/api/friend.ts","app/api/message.ts","app/notifycation/notify.ts","features/chat/chatSlice.ts","features/chat/components/contentchat/ContentItem.tsx","features/chat/components/contentchat/ContentChat.tsx","features/chat/components/listchat/ChatItem.tsx","features/chat/components/listchat/ListChatBody.tsx","features/chat/components/listchat/ListChatHeader.tsx","features/chat/components/listchat/ListChat.tsx","features/chat/components/userinfo/UserInfo.tsx","app/api/account.ts","features/login/loginSlice.ts","features/nav/navSlice.ts","app/store.ts","app/api/chat.ts","features/chat/components/sendbar/index.tsx","features/chat/index.tsx","features/login/form/index.tsx","features/login/index.tsx","app/layout/LoadingComponent.tsx","features/nav/searchbar/index.tsx","features/nav/components/friendverifynotitem/index.tsx","features/nav/components/listfriendverify/index.tsx","app/api/image.ts","features/nav/index.tsx","features/friend/component/listfriend/FriendItem.tsx","features/friend/component/listfriend/ListFriend.tsx","features/friend/index.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","response","error","Promise","reject","data","responseBody","requests","get","url","then","post","body","put","del","delete","postForm","file","formData","FormData","append","postFile","friendApi","findByKeyword","keyword","getListNotVerify","verifyFriend","idFriend","unFriend","messageApi","getListMessage","getContentMessage","conversationIid","showError","message","autoCLose","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","initialState","chats","idUserRecive","conversationId","contentChat","isSearch","listFriendSearch","userSelect","username","birthday","email","image","sex","createAsyncThunk","None","a","rejectWithValue","err","description","getContentMessageByConvId","findFriendByKeyword","history","push","chatSlice","createSlice","name","reducers","addMessage","state","payload","idSend","content","isSend","time","Date","index","findIndex","x","userFriendId","value","toISOString","setIdUserRecive","onAddUserChat","setWaitForAdd","id","extraReducers","builder","addCase","fulfilled","messageContent","reverse","reducer","actions","React","memo","className","src","alt","useSelector","chat","imageRecive","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","useEffect","map","contChat","key","ref","isSelect","dispatch","useDispatch","GridRow","GridColumn","onClick","e","genTime","split","finalTime","slice","generateMessage","Grid","val","login","useState","setstate","s","accountApi","getCurrent","account","loginSlice","isLoggedIn","appLoaded","userId","checkCurrentSuccess","checkCurrentFail","removeItem","logoutAccount","setNewImage","setItem","navSlice","listFriendNotVerify","onAddToListFriendNotVerify","onAcceptFriend","friendId","splice","onAddNewItem","idUserSend","removeFriend","rootReducer","combineReducers","charReducer","loginReducer","nav","navReducer","store","configureStore","appDispatch","CHAT_URL","REACT_APP_CHAT_URL","socket","io","connect","myId","on","idRecive","user","console","log","_id","sendMessage","userRecive","emit","room","SendBar","setContent","Input","onKeyDown","handleKeyDown","onChange","target","icon","Icon","inverted","circular","link","placeholder","computer","FormLogin","namelogin","setNamelogin","password","setPassword","type","Button","color","basic","Login","LoadingComponent","Dimmer","active","Loader","props","handleAccept","res","showMessage","catch","ListFriendVerify","lisiFriendNotVerify","imageApi","sendImage","anchorEl","setAnchorEl","open","Boolean","handleFileInputChange","evt","files","FileReader","resolve","reader","onload","code","result","readAsDataURL","elem","imageUrl","fileInputState","to","htmlFor","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","FriendItem","isFriend","stateIsSend","setstateIsSend","handleAddFriend","Paper","Label","ListFriend","fri","Friend","PrivateRoute","Component","component","rest","render","withRouter","dispath","rooms","path","exact","Chat","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c300db45.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n  const token = window.localStorage.getItem(\"jwt\");\r\n  if (token) config.headers.Authorization = token;\r\n  return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error.response.data);\r\n  }\r\n);\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n  get:  (url: string) => axios.get(url).then(responseBody),\r\n  post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n  put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n  del: (url: string) => axios.delete(url).then(responseBody),\r\n  postForm: (url: string, file: Blob | string) => {\r\n    let formData = new FormData();\r\n    formData.append(\"File\", file);\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { \"Content-type\": \"multipart/form-data\" },\r\n      })\r\n      .then(responseBody);\r\n  },\r\n  postFile: (url: string, file:any) => {\r\n    let formData = new FormData();\r\n    formData.append(\"File\", file);\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { \"Content-type\": \"multipart/form-data\" },\r\n      })\r\n      .then(responseBody);\r\n  },\r\n};\r\n\r\nexport default requests;\r\n","import { IFindFriend, IFriendNotVerify } from \"app/models/friend\";\r\nimport request from \"./agent\";\r\n\r\nconst friendApi = {\r\n  findByKeyword: (keyword: string): Promise<IFindFriend[]> =>\r\n    request.get(\"friend/getbykeyword/\" + keyword),\r\n  getListNotVerify: (): Promise<IFriendNotVerify[]> =>\r\n    request.get(\"/friend/getFriendNotVerify\"),\r\n  verifyFriend: (idFriend: string) =>\r\n    request.post(\"/friend/verifyFriend\", { idFriend }),\r\n  unFriend: (idFriend: string) => request.get(`/friend/unfriend/${idFriend}`),\r\n};\r\n\r\nexport default friendApi;\r\n","import { IMessageItem, IResponseGetMessageContent } from \"app/models/message\";\r\nimport request from \"./agent\";\r\n\r\nconst messageApi = {\r\n  getListMessage: (): Promise<IMessageItem[]> =>\r\n    request.get(\"message/getByIdUser\"),\r\n  getContentMessage: (\r\n    conversationIid: string\r\n  ): Promise<IResponseGetMessageContent> =>\r\n    request.get(\"message/getMessageContent?conversationId=\" + conversationIid),\r\n};\r\n\r\nexport default messageApi;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const showError = (message: String, autoCLose: number = 5000) => {\r\n  toast.error(message, {\r\n    position: \"top-right\",\r\n    autoClose: autoCLose,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\nexport const showSuccess = (message: String, autoCLose: number = 5000) => {\r\n  toast.success(message, {\r\n    position: \"top-right\",\r\n    autoClose: autoCLose,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\nexport const showMessage = (message: String, autoCLose: number = 5000) => {\r\n  toast(message, {\r\n    position: \"top-right\",\r\n    autoClose: autoCLose,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\nexport const showMessageDark = (message: String, autoCLose: number = 5000) => {\r\n  toast.dark(message, {\r\n    position: \"top-right\",\r\n    autoClose: autoCLose,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};","import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport friendApi from \"app/api/friend\";\r\nimport messageApi from \"app/api/message\";\r\nimport { IErrorFromServer } from \"app/models/error\";\r\nimport { IFindFriend } from \"app/models/friend\";\r\nimport {\r\n  IMessageContent,\r\n  IMessageItem,\r\n  IResponseGetMessageContent,\r\n} from \"app/models/message\";\r\nimport { IUserRecive } from \"app/models/user\";\r\nimport { showError } from \"app/notifycation/notify\";\r\nimport { history } from \"index\";\r\nimport { IMessageRecive } from \"./types/message\";\r\n\r\ntype ChatState = {\r\n  chats: IMessageItem[];\r\n  idUserRecive?: string;\r\n  conversationId?: string;\r\n  contentChat: IMessageContent[];\r\n  isSearch: Boolean;\r\n  listFriendSearch: IFindFriend[];\r\n  userSelect: IUserRecive;\r\n};\r\n\r\nconst initialState: ChatState = {\r\n  chats: [],\r\n  idUserRecive: undefined,\r\n  conversationId: undefined,\r\n  contentChat: [],\r\n  isSearch: false,\r\n  listFriendSearch: [],\r\n  userSelect: {\r\n    username: \"\",\r\n    birthday: \"\",\r\n    email: \"\",\r\n    image: \"\",\r\n    sex: false,\r\n  },\r\n};\r\n\r\nexport const getListMessage = createAsyncThunk(\r\n  \"chat/getListMessage\",\r\n  async (None, { rejectWithValue }) => {\r\n    try {\r\n      const data = await messageApi.getListMessage();\r\n      return data;\r\n    } catch (error) {\r\n      let err = error as IErrorFromServer;\r\n      showError(err.description);\r\n      return rejectWithValue(err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const getContentMessageByConvId = createAsyncThunk(\r\n  \"chat/getContentMessageByConvId\",\r\n  async (conversationId: string, { rejectWithValue }) => {\r\n    try {\r\n      const data = await messageApi.getContentMessage(conversationId);\r\n      return data;\r\n    } catch (error) {\r\n      let err = error as IErrorFromServer;\r\n      return rejectWithValue(err);\r\n    }\r\n  }\r\n);\r\n\r\nexport const findFriendByKeyword = createAsyncThunk(\r\n  \"chat/findFriendByKeyword\",\r\n  async (keyword: string, { rejectWithValue }) => {\r\n    try {\r\n      const data = await friendApi.findByKeyword(keyword);\r\n      history.push(\"/friend\");\r\n      return data;\r\n    } catch (error) {\r\n      let err = error as IErrorFromServer;\r\n      showError(err.description);\r\n      return rejectWithValue(err);\r\n    }\r\n  }\r\n);\r\n\r\nconst chatSlice = createSlice({\r\n  name: \"chat\",\r\n  initialState,\r\n  reducers: {\r\n    addMessage(state, { payload }: PayloadAction<IMessageRecive>) {\r\n      if (state.idUserRecive && state.idUserRecive) {\r\n        if (state.idUserRecive === payload.idSend) {\r\n          state.contentChat.push({\r\n            content: payload.content,\r\n            isSend: false,\r\n            time: new Date(),\r\n          });\r\n        } else {\r\n          state.contentChat.push({\r\n            content: payload.content,\r\n            isSend: true,\r\n            time: new Date(),\r\n          });\r\n        }\r\n      }\r\n      const index = state.chats.findIndex(\r\n        (x) => x.conversationId === payload.conversationId\r\n      );\r\n      if (index === -1) {\r\n        const name = payload.username + \"\";\r\n        state.chats.push({\r\n          username: name,\r\n          content: \"\",\r\n          conversationId: payload.conversationId,\r\n          isSend: false,\r\n          userFriendId: payload.idSend,\r\n          image: payload.image,\r\n        });\r\n      } else {\r\n        let value = { ...state.chats[index] };\r\n        value.content = payload.content;\r\n        const time = new Date();\r\n        value.time = time.toISOString();\r\n        state.chats[index] = value;\r\n      }\r\n    },\r\n    setIdUserRecive(state, { payload }: PayloadAction<string>) {\r\n      if (state.idUserRecive !== payload) {\r\n        state.idUserRecive = payload;\r\n        const index = state.chats.findIndex((x) => x.userFriendId === payload);\r\n        if (index !== -1) {\r\n          const data = state.chats[index];\r\n          state.userSelect = data;\r\n        }\r\n      }\r\n    },\r\n    onAddUserChat(state, { payload }: PayloadAction<IMessageItem>) {\r\n      state.chats.push(payload);\r\n    },\r\n    setWaitForAdd(state, { payload }: PayloadAction<string>) {\r\n      const index = state.listFriendSearch.findIndex((x) => x.id === payload);\r\n      if (index !== -1) {\r\n        state.listFriendSearch[index].isSend = true;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(\r\n      getListMessage.fulfilled,\r\n      (state, { payload }: PayloadAction<IMessageItem[]>) => {\r\n        state.chats = payload;\r\n      }\r\n    );\r\n    builder.addCase(\r\n      getContentMessageByConvId.fulfilled,\r\n      (state, { payload }: PayloadAction<IResponseGetMessageContent>) => {\r\n        state.contentChat = payload.messageContent.reverse();\r\n        state.conversationId = payload.conversationId;\r\n        state.isSearch = false;\r\n      }\r\n    );\r\n    builder.addCase(\r\n      findFriendByKeyword.fulfilled,\r\n      (state, { payload }: PayloadAction<IFindFriend[]>) => {\r\n        state.isSearch = true;\r\n        state.listFriendSearch = payload;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nconst { reducer, actions } = chatSlice;\r\n\r\nexport const {\r\n  addMessage,\r\n  setIdUserRecive,\r\n  setWaitForAdd,\r\n  onAddUserChat,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\ninterface IProps {\r\n  content: string;\r\n  isSend: Boolean;\r\n  image?: string;\r\n}\r\n\r\nconst ContentItem: React.FC<IProps> = ({ content, isSend, image }) => {\r\n  return (\r\n    <div className=\"content-chat-item\">\r\n      {!isSend &&\r\n        (image ? <img src={image} alt=\"img\" /> : <AccountCircleIcon />)}\r\n      <div\r\n        className={isSend ? \"chat-content chat-content-isSend\" : \"chat-content\"}\r\n      >\r\n        {content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContentItem);\r\n","import { RootState } from \"app/store\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ContentItem from \"./ContentItem\";\r\nimport \"./styles.scss\";\r\n\r\nconst ContentChat = () => {\r\n  const contentChat = useSelector((state: RootState) => state.chat.contentChat);\r\n\r\n  const imageRecive = useSelector(\r\n    (state: RootState) => state.chat.userSelect.image\r\n  );\r\n\r\n  let messagesEndRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef!.current!.scrollIntoView();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messagesEndRef, scrollToBottom]);\r\n\r\n  return (\r\n    <div className=\"content-chat\">\r\n      {contentChat.map((contChat, index) => (\r\n        <ContentItem\r\n          image={imageRecive}\r\n          content={contChat.content}\r\n          isSend={contChat.isSend}\r\n          key={index}\r\n        />\r\n      ))}\r\n      <div id={\"messagesEndRef\"} ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContentChat);\r\n","import { IMessageItem } from \"app/models/message\";\r\nimport {\r\n  getContentMessageByConvId,\r\n  setIdUserRecive,\r\n} from \"features/chat/chatSlice\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { GridColumn, GridRow } from \"semantic-ui-react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\ninterface IProps {\r\n  data: IMessageItem;\r\n  isSelect?: Boolean;\r\n}\r\n\r\nconst ChatItem: React.FC<IProps> = ({ data, isSelect }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCLick = () => {\r\n    dispatch(setIdUserRecive(data.userFriendId));\r\n    dispatch(getContentMessageByConvId(data.conversationId));\r\n  };\r\n\r\n  const generateMessage = (\r\n    isSend: Boolean,\r\n    content: string,\r\n    time?: string\r\n  ): string => {\r\n    const genTime = time ? time.split(\"T\")[1].split(\".\")[0].split(\":\") : \"\";\r\n    const finalTime = genTime ? genTime[0] + \":\" + genTime[1] : \"\";\r\n    const finalContent = content\r\n      ? isSend\r\n        ? content.slice(0, 20)\r\n        : content.slice(0, 40)\r\n      : \"\";\r\n    return finalContent + \" \" + finalTime;\r\n  };\r\n\r\n  return (\r\n    <GridRow>\r\n      <GridColumn>\r\n        <div className=\"wrap-chat-item\">\r\n          <div\r\n            className={isSelect ? \"chat-item chat-item-select\" : \"chat-item\"}\r\n            onClick={(e) => handleCLick()}\r\n          >\r\n            {!data.image ? (\r\n              <AccountCircleIcon />\r\n            ) : (\r\n              <img src={data.image} alt=\"user-mess\" />\r\n            )}\r\n            <div className=\"conv-info-content\">\r\n              <p className=\"username\">{data.username}</p>\r\n              <p className=\"content\">\r\n                {generateMessage(data.isSend, data.content, data.time)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </GridColumn>\r\n    </GridRow>\r\n  );\r\n};\r\n\r\nexport default React.memo(ChatItem);\r\n","import { IMessageItem } from \"app/models/message\";\r\nimport { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ChatItem from \"./ChatItem\";\r\n\r\ninterface IProps {\r\n  data: IMessageItem[];\r\n}\r\n\r\nconst ListChatBody: React.FC<IProps> = ({ data }) => {\r\n  const idUserRecive = useSelector(\r\n    (state: RootState) => state.chat.idUserRecive\r\n  );\r\n\r\n  return (\r\n    <Grid className=\"list-chat-content\">\r\n      {data.map((val) => (\r\n        <ChatItem\r\n          data={val}\r\n          key={val.conversationId}\r\n          isSelect={idUserRecive === val.userFriendId}\r\n        />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(ListChatBody);\r\n","import { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst ListChatHeader = () => {\r\n  const { image } = useSelector((state: RootState) => state.login);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {image && <img src={image} alt=\"img\" />}\r\n      <p className=\"title\">Chat</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ListChatHeader);\r\n","import { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ListChatBody from \"./ListChatBody\";\r\nimport ListChatHeader from \"./ListChatHeader\";\r\nimport \"./styles.scss\";\r\n\r\nconst ListChat = () => {\r\n  const chats = useSelector((state: RootState) => state.chat.chats);\r\n\r\n  return (\r\n    <div className=\"list-chat\">\r\n      <ListChatHeader />\r\n      <ListChatBody data={chats} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ListChat);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport \"./styles.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"app/store\";\r\nimport { IUserRecive } from \"app/models/user\";\r\n\r\nconst UserInfo = () => {\r\n  const [state, setstate] = useState<IUserRecive>({\r\n    username: \"\",\r\n    birthday: \"\",\r\n    email: \"\",\r\n    image: \"\",\r\n    sex: false,\r\n  });\r\n\r\n  const { idUserRecive, userSelect } = useSelector((s: RootState) => s.chat);\r\n\r\n  useEffect(() => {\r\n    if (idUserRecive) {\r\n      setstate(userSelect);\r\n    }\r\n  }, [idUserRecive, userSelect]);\r\n\r\n  return (\r\n    <div className=\"user-info\">\r\n      {state.image ? (\r\n        <img src={state.image} alt=\"logo\" />\r\n      ) : (\r\n        <AccountCircleIcon />\r\n      )}\r\n      <p className=\"username\">{state.username}</p>\r\n      <div className=\"user-info-sub\">\r\n        <p className=\"sub\">Email </p>\r\n        <p className=\"content\">{state.email}</p>\r\n      </div>\r\n      <div className=\"user-info-sub\">\r\n        <p className=\"sub\">Ngày Sinh </p>\r\n        <p className=\"content\">{state.birthday?.split(\"T\")[0]}</p>\r\n      </div>\r\n      <div className=\"user-info-sub\">\r\n        <p className=\"sub\">Giới Tính </p>\r\n        <p className=\"content\">{state.sex ? \"Nam\" : \"Nữ\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(UserInfo);\r\n","import { IAccount, ICheckCurrentAccount, ILogginSuccess } from \"app/models/account\";\r\nimport request from \"./agent\";\r\n\r\nconst accountApi = {\r\n  login: (data: IAccount):Promise<ILogginSuccess> => request.post(\"account/login\", data),\r\n  getCurrent: (): Promise<ICheckCurrentAccount> =>\r\n    request.get(\"user/getcurrent\"),\r\n};\r\n\r\nexport default accountApi;\r\n","import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { IErrorFromServer } from \"app/models/error\";\r\nimport accountApi from \"app/api/account\";\r\nimport { IAccount, ILogginSuccess } from \"app/models/account\";\r\nimport { showError } from \"app/notifycation/notify\";\r\n\r\ntype LoginState = {\r\n  isLoggedIn: Boolean;\r\n  appLoaded: Boolean;\r\n  userId: string;\r\n  image?: string;\r\n};\r\n\r\nconst initialState: LoginState = {\r\n  isLoggedIn: false,\r\n  appLoaded: false,\r\n  userId: \"\",\r\n  image: \"\",\r\n};\r\n\r\nexport const login = createAsyncThunk(\r\n  \"login/userlogin\",\r\n  async (account: IAccount, { rejectWithValue }) => {\r\n    try {\r\n      const data = await accountApi.login(account);\r\n      return data;\r\n    } catch (error) {\r\n      let err = error as IErrorFromServer;\r\n      showError(err.description);\r\n      return rejectWithValue(err);\r\n    }\r\n  }\r\n);\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    checkCurrentSuccess(\r\n      state,\r\n      { payload }: PayloadAction<{ userId: string; image: string }>\r\n    ) {\r\n      state.userId = payload.userId;\r\n      state.appLoaded = true;\r\n      state.isLoggedIn = true;\r\n      state.image = payload.image;\r\n    },\r\n    checkCurrentFail(state) {\r\n      window.localStorage.removeItem(\"jwt\");\r\n      state.appLoaded = true;\r\n      state.isLoggedIn = false;\r\n    },\r\n    logoutAccount(state) {\r\n      state.image = \"\";\r\n      state.isLoggedIn = false;\r\n      state.userId = \"\";\r\n      window.localStorage.removeItem(\"jwt\");\r\n    },\r\n    setNewImage(state, { payload }: PayloadAction<string>) {\r\n      state.image = payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(\r\n      login.fulfilled,\r\n      (state, { payload }: PayloadAction<ILogginSuccess>) => {\r\n        window.localStorage.setItem(\"jwt\", payload.token);\r\n        state.appLoaded = true;\r\n        state.userId = payload.userId;\r\n        state.isLoggedIn = true;\r\n        state.image = payload.image;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nconst { reducer, actions } = loginSlice;\r\n\r\nexport const {\r\n  checkCurrentSuccess,\r\n  checkCurrentFail,\r\n  logoutAccount,\r\n  setNewImage,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IFriendNotVerify, IReciveInvitation } from \"app/models/friend\";\r\n\r\ntype NavState = {\r\n  listFriendNotVerify: IFriendNotVerify[];\r\n};\r\n\r\nconst initialState: NavState = {\r\n  listFriendNotVerify: [],\r\n};\r\n\r\nconst navSlice = createSlice({\r\n  name: \"nav\",\r\n  initialState,\r\n  reducers: {\r\n    onAddToListFriendNotVerify(\r\n      state,\r\n      { payload }: PayloadAction<IFriendNotVerify[]>\r\n    ) {\r\n      state.listFriendNotVerify = payload;\r\n    },\r\n    onAcceptFriend(state, { payload }: PayloadAction<string>) {\r\n      const index = state.listFriendNotVerify.findIndex(\r\n        (x) => x.friendId === payload\r\n      );\r\n      if (index !== -1) {\r\n        state.listFriendNotVerify.splice(index, 1);\r\n      }\r\n    },\r\n    onAddNewItem(state, { payload }: PayloadAction<IReciveInvitation>) {\r\n      state.listFriendNotVerify.push({\r\n        friendId: payload.friendId,\r\n        image: payload.image,\r\n        username: payload.username,\r\n        userFriendId: payload.idUserSend,\r\n      });\r\n    },\r\n    removeFriend(state, { payload }: PayloadAction<string>) {\r\n      const index = state.listFriendNotVerify.findIndex(\r\n        (x) => x.friendId === payload\r\n      );\r\n      if (index !== -1) {\r\n        state.listFriendNotVerify.splice(index, 1);\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {},\r\n});\r\n\r\nconst { reducer, actions } = navSlice;\r\n\r\nexport const {\r\n  onAddToListFriendNotVerify,\r\n  onAcceptFriend,\r\n  onAddNewItem,\r\n  removeFriend\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { configureStore, combineReducers, Action } from \"@reduxjs/toolkit\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport charReducer from \"features/chat/chatSlice\";\r\nimport loginReducer from \"features/login/loginSlice\";\r\nimport navReducer from \"features/nav/navSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  chat: charReducer,\r\n  login: loginReducer,\r\n  nav: navReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const appDispatch = store.dispatch;\r\n\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\r\n\r\nexport default store;\r\n","import { IMessageReciveData } from \"app/models/message\";\r\nimport { appDispatch } from \"../store\";\r\nimport io from \"socket.io-client\";\r\nimport { addMessage, onAddUserChat } from \"features/chat/chatSlice\";\r\nimport { IMessageRecive } from \"features/chat/types/message\";\r\nimport { IAcceptFriend, IReciveInvitation } from \"app/models/friend\";\r\nimport { onAddNewItem } from \"features/nav/navSlice\";\r\nimport { IUserRecive } from \"app/models/user\";\r\nconst CHAT_URL = process.env.REACT_APP_CHAT_URL as string;\r\nconst socket = io.connect(CHAT_URL);\r\nlet myId: string = \"\";\r\n\r\nsocket.on(\"new_msg\", (data: IMessageReciveData) => {\r\n  const payload: IMessageRecive = {\r\n    content: data.content,\r\n    idSend: data.idUserSend,\r\n    idRecive: data.idUserRecive,\r\n    isSend: myId === data.idUserSend ? true : false,\r\n    conversationId: data.conversationId,\r\n    image: data.image,\r\n    username: data.username,\r\n  };\r\n  appDispatch(addMessage(payload));\r\n});\r\n\r\nsocket.on(\"recive_invitation_friend\", (data: IReciveInvitation) => {\r\n  appDispatch(onAddNewItem(data));\r\n});\r\n\r\nsocket.on(\"addNewUserToListChat\", (user: IAcceptFriend) => {\r\n  console.log(user);\r\n  console.log(myId);\r\n\r\n  appDispatch(\r\n    onAddUserChat({\r\n      content: \"\",\r\n      conversationId: user.conversationId,\r\n      isSend: false,\r\n      userFriendId: user._id,\r\n      username: user.username,\r\n      birthday: user.birthday,\r\n      email: user.email,\r\n      image: user.image,\r\n      sex: user.sex,\r\n      time: \"\",\r\n    })\r\n  );\r\n});\r\n\r\nexport const createMyRoom = (rooms: string) => {\r\n  myId = rooms;\r\n  console.log('create room');\r\n  \r\n  socket.emit(\"privatechatroom\", rooms);\r\n};\r\n\r\nexport const sendMessage = (\r\n  message: string,\r\n  idUserSend: string,\r\n  idUserRecive: string,\r\n  conversationId: string,\r\n  userRecive: IUserRecive\r\n) => {\r\n  socket.emit(\"sendMessage\", {\r\n    message,\r\n    room: idUserRecive,\r\n    idUserSend,\r\n    idUserRecive,\r\n    conversationId,\r\n    image: userRecive.image,\r\n    email: userRecive.email,\r\n    sex: userRecive.sex,\r\n    birthday: userRecive.birthday,\r\n    username: userRecive.username,\r\n  });\r\n};\r\n\r\nexport const sendInvitationFriend = (\r\n  idUserSend: string,\r\n  idUserRecive: string\r\n) => {\r\n  socket.emit(\"sendInvitationFriend\", {\r\n    idUserSend,\r\n    idUserRecive,\r\n    room: idUserRecive,\r\n  });\r\n};\r\n\r\nexport const acceptFriend = (conversationId: string) => {\r\n  socket.emit(\"acceptFriend\", {\r\n    conversationId,\r\n  });\r\n};\r\n","import { sendMessage } from \"app/api/chat\";\r\nimport { RootState } from \"app/store\";\r\nimport React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Icon, Input } from \"semantic-ui-react\";\r\n\r\nconst SendBar = () => {\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const { userId } = useSelector((s: RootState) => s.login);\r\n\r\n  const userSelect = useSelector((s: RootState) => s.chat.userSelect);\r\n\r\n  const { idUserRecive, conversationId } = useSelector(\r\n    (s: RootState) => s.chat\r\n  );\r\n\r\n  const handleSendMessage = () => {\r\n    if (idUserRecive && conversationId) {\r\n      sendMessage(content, userId, idUserRecive, conversationId, userSelect);\r\n      setContent(\"\");\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      if (idUserRecive && conversationId) {\r\n        sendMessage(content, userId, idUserRecive, conversationId, userSelect);\r\n        setContent(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      value={content}\r\n      onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyDown(e)}\r\n      onChange={(e) => setContent(e.target.value)}\r\n      icon={\r\n        <Icon\r\n          onClick={() => handleSendMessage()}\r\n          name=\"send\"\r\n          inverted\r\n          circular\r\n          link\r\n        />\r\n      }\r\n      placeholder=\"Nhập tin nhắn ...\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SendBar;\r\n","import { RootState } from \"app/store\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Grid, GridColumn, GridRow } from \"semantic-ui-react\";\r\nimport { getListMessage } from \"./chatSlice\";\r\nimport ContentChat from \"./components/contentchat/ContentChat\";\r\nimport ListChat from \"./components/listchat/ListChat\";\r\nimport \"./styles.scss\";\r\nimport UserInfo from \"./components/userinfo/UserInfo\";\r\nimport SendBar from \"./components/sendbar\";\r\n\r\nconst Chat = () => {\r\n  const userId = useSelector((s: RootState) => s.login.userId);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      dispatch(getListMessage());\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <Grid>\r\n        <GridRow>\r\n          <GridColumn computer={4} className=\"chat-page-listchat\">\r\n            <ListChat />\r\n          </GridColumn>\r\n          <GridColumn computer={12} className=\"chat-page-content\">\r\n            <Grid>\r\n              <GridRow>\r\n                <GridColumn computer={12}>\r\n                  <ContentChat />\r\n                  <div className=\"chat-main\">\r\n                    <SendBar />\r\n                  </div>\r\n                </GridColumn>\r\n                <GridColumn computer={4}>\r\n                  <UserInfo />\r\n                </GridColumn>\r\n              </GridRow>\r\n            </Grid>\r\n          </GridColumn>\r\n        </GridRow>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Chat);\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { login } from \"../loginSlice\";\r\nimport { Input } from \"semantic-ui-react\";\r\nimport \"./styles.scss\";\r\nconst FormLogin = () => {\r\n  const [namelogin, setNamelogin] = useState(\"\");\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const handleClick = () => {\r\n    dispatch(login({ namelogin, password }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-login\">\r\n      <p className=\"form-login-title\">Tên Đăng Nhập</p>\r\n      <Input value={namelogin} onChange={(e) => setNamelogin(e.target.value)} />\r\n      <p className=\"form-login-title\">Mật Khẩu</p>\r\n      <Input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <Button color=\"twitter\" onClick={(e) => handleClick()}>\r\n        Đăng nhập\r\n      </Button>\r\n      <div className='clear'></div>\r\n      <p>Bạn Chưa có tài khoản ?</p>\r\n      <Button basic color='grey'>\r\n        Đăng ký\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormLogin;\r\n","import { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Grid, GridColumn, GridRow } from \"semantic-ui-react\";\r\nimport { history } from \"index\";\r\nimport \"./styles.scss\";\r\nimport FormLogin from \"./form\";\r\n\r\nconst Login = () => {\r\n  const isLoggedIn = useSelector((s: RootState) => s.login.isLoggedIn);\r\n\r\n  if (isLoggedIn) history.push(\"/chat\");\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <Grid>\r\n        <GridRow>\r\n          <GridColumn computer={11} className=\"wrap-cont\">\r\n            <div className=\"cont\"></div>\r\n            <p className=\"title-cont\">MessDev</p>\r\n            <p className=\"title-cont-sub\">Đăng nhập để vào trang chủ 🎉🎉🎉</p>\r\n          </GridColumn>\r\n          <GridColumn computer={5}>\r\n            <FormLogin />\r\n          </GridColumn>\r\n        </GridRow>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\r\n  inverted = true,\r\n  content\r\n}) => {\r\n  return (\r\n    <Dimmer active inverted={inverted}>\r\n      <Loader content={content} />\r\n    </Dimmer>\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import { findFriendByKeyword } from \"features/chat/chatSlice\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nconst SearchBar = () => {\r\n  const [state, setstate] = useState(\"\");\r\n\r\n  const dispatch = useDispatch()\r\n  \r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n        dispatch(findFriendByKeyword(state));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-input\">\r\n      <Input\r\n        placeholder=\"Nhập tên cần tìm...\"\r\n        value={state}\r\n        onChange={(e) => setstate(e.target.value)}\r\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) =>\r\n          handleKeyDown(e)\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBar);\r\n","import friendApi from \"app/api/friend\";\r\nimport { IFriendNotVerify } from \"app/models/friend\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport \"./styles.scss\";\r\nimport { onAcceptFriend, removeFriend } from \"../../navSlice\";\r\nimport { showError, showMessage } from \"app/notifycation/notify\";\r\nimport { onAddUserChat } from \"features/chat/chatSlice\";\r\nimport { acceptFriend } from \"app/api/chat\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\nconst FriendNotVerifyItem: React.FC<IFriendNotVerify> = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAccept = () => {\r\n    friendApi\r\n      .verifyFriend(props.friendId)\r\n      .then((res) => {\r\n        acceptFriend(props.friendId);\r\n        dispatch(onAcceptFriend(props.friendId));\r\n        showMessage(\"🚀 Thêm Thành Công, Bây giờ các bạn đã là bạn bè\");\r\n        dispatch(\r\n          onAddUserChat({\r\n            content: \"\",\r\n            conversationId: props.friendId,\r\n            isSend: false,\r\n            userFriendId: props.userFriendId,\r\n            username: props.username,\r\n            birthday: props.birthday,\r\n            email: props.email,\r\n            image: props.image,\r\n            sex: props.sex,\r\n            time: \"\",\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        showError(\"Thêm Thất Bại\");\r\n      });\r\n  };\r\n\r\n  const handleUnfriend = () => {\r\n    friendApi.unFriend(props.friendId).then((res) => {\r\n      dispatch(removeFriend(props.friendId));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fri-ver\">\r\n        {props.image ? (\r\n          <img src={props.image} alt=\"logo\" />\r\n        ) : (\r\n          <AccountCircleIcon />\r\n        )}\r\n        <div>\r\n          <p>{props.username}</p>\r\n        </div>\r\n        <div className=\"wrap-btn\">\r\n          <Button\r\n            color=\"twitter\"\r\n            content=\"Chấp Nhận\"\r\n            onClick={(e) => handleAccept()}\r\n          />\r\n          <Button color=\"red\" content=\"Xóa\" onClick={(e) => handleUnfriend()} />\r\n        </div>\r\n      </div>\r\n      <div className=\"line\"></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(FriendNotVerifyItem);\r\n","import { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport FriendNotVerifyItem from \"../friendverifynotitem\";\r\nimport \"./styles.scss\";\r\n\r\nconst ListFriendVerify = () => {\r\n  const lisiFriendNotVerify = useSelector(\r\n    (state: RootState) => state.nav.listFriendNotVerify\r\n  );\r\n  return (\r\n    <div className=\"list-fri-ver\">\r\n      <p className=\"title\">Lời Mời Kết Bạn 🎉🎉🎉</p>\r\n      {lisiFriendNotVerify.map((val) => (\r\n        <FriendNotVerifyItem\r\n          birthday={val.birthday}\r\n          email={val.email}\r\n          sex={val.sex}\r\n          key={val.friendId}\r\n          userFriendId={val.userFriendId}\r\n          username={val.username}\r\n          friendId={val.friendId}\r\n          image={val.image}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListFriendVerify;\r\n","import request from \"./agent\";\r\n\r\nconst imageApi = {\r\n  sendImage: (data: string) => request.postForm(\"image\", data),\r\n};\r\n\r\nexport default imageApi;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport \"./styles.scss\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"app/store\";\r\nimport SearchBar from \"./searchbar\";\r\nimport friendApi from \"app/api/friend\";\r\nimport ListFriendVerify from \"./components/listfriendverify\";\r\nimport { onAddToListFriendNotVerify } from \"./navSlice\";\r\nimport { logoutAccount, setNewImage } from \"features/login/loginSlice\";\r\nimport imageApi from \"app/api/image\";\r\nimport { IAddImageSuccess } from \"./type/image\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n  const { image } = useSelector((s: RootState) => s.login);\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLDivElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setAnchorEl(!open ? event.currentTarget : null);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logoutAccount());\r\n  };\r\n\r\n  const handleFileInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tgt = evt.target;\r\n    let files = tgt.files;\r\n    if (FileReader && files && files[0]) {\r\n      const file = files[0];\r\n      let p = new Promise(function (resolve) {\r\n        let reader = new FileReader();\r\n        reader.onload = function () {\r\n          let code = reader.result + \"\";\r\n          resolve(code);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n\r\n      p.then((elem) => {\r\n        imageApi.sendImage(elem + \"\").then((res: IAddImageSuccess) => {\r\n          dispatch(setNewImage(res.imageUrl));\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const [fileInputState, setFileInputState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    friendApi\r\n      .getListNotVerify()\r\n      .then((res) => {\r\n        dispatch(onAddToListFriendNotVerify(res));\r\n      })\r\n      .catch((err) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"nav\">\r\n      <div className=\"title\">\r\n        <NavLink to=\"/chat\">MessDev </NavLink>\r\n      </div>\r\n\r\n      <SearchBar />\r\n      <div className=\"icons\">\r\n        {image ? (\r\n          <>\r\n            <img src={image} alt=\"img\" />\r\n            <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n              Đổi ảnh đại diện\r\n            </label>\r\n            <input\r\n              id=\"file-upload\"\r\n              type=\"file\"\r\n              name=\"image\"\r\n              onChange={handleFileInputChange}\r\n              value={fileInputState}\r\n              className=\"form-input\"\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"wrap-icon\">\r\n              <AccountCircleIcon />\r\n            </div>\r\n            <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n              Đổi ảnh đại diện\r\n            </label>\r\n            <input\r\n              id=\"file-upload\"\r\n              type=\"file\"\r\n              name=\"image\"\r\n              onChange={handleFileInputChange}\r\n              value={fileInputState}\r\n              className=\"form-input\"\r\n            />\r\n          </>\r\n        )}\r\n        <div className=\"wrap-icon\" onClick={handleClick}>\r\n          <NotificationsIcon />\r\n          <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={handleClose}\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"left\",\r\n            }}\r\n            transformOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"center\",\r\n            }}\r\n          >\r\n            <ListFriendVerify />\r\n          </Popover>\r\n        </div>\r\n        <div className=\"wrap-icon\" onClick={(e) => handleLogout()}>\r\n          <ExitToAppIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Navigation);\r\n","import { Paper } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Label } from \"semantic-ui-react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport { history } from \"index\";\r\nimport { sendInvitationFriend } from \"app/api/chat\";\r\nimport { RootState } from \"app/store\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\ninterface IProps {\r\n  isFriend: Boolean;\r\n  username: string;\r\n  image?: string;\r\n  isSend?: Boolean;\r\n  id: string;\r\n}\r\n\r\nconst FriendItem: React.FC<IProps> = ({\r\n  isFriend,\r\n  username,\r\n  image,\r\n  isSend,\r\n  id,\r\n}) => {\r\n  const [stateIsSend, setstateIsSend] = useState(isSend ? isSend : false);\r\n  const handleMessage = () => {\r\n    history.push(\"/chat\");\r\n  };\r\n\r\n  const userId = useSelector((state: RootState) => state.login.userId);\r\n\r\n  const handleAddFriend = () => {\r\n    sendInvitationFriend(userId, id);\r\n    setstateIsSend(true);\r\n  };\r\n\r\n  return (\r\n    <Paper>\r\n      <div className=\"fri-item\">\r\n        {image ? <img src={image} alt=\"img\" /> : <AccountCircleIcon />}\r\n        <div className=\"cont\">\r\n          <p className=\"title\">{username}</p>\r\n          <p className=\"status\">{isFriend ? \"Bạn Bè\" : \"Chưa Kết Bạn\"}</p>\r\n        </div>\r\n        {stateIsSend ? (\r\n          <Label\r\n            content=\"Đã Gửi Lời Mời Kết Bạn Vui Lòng Chờ\"\r\n            color=\"grey\"\r\n            basic\r\n          />\r\n        ) : isFriend ? (\r\n          <Button color=\"twitter\" onClick={(e) => handleMessage()}>\r\n            Nhắn tin\r\n          </Button>\r\n        ) : (\r\n          <Button color=\"green\" onClick={(e) => handleAddFriend()}>\r\n            kết bạn\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default FriendItem;\r\n","import { RootState } from \"app/store\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport FriendItem from \"./FriendItem\";\r\n\r\nconst ListFriend = () => {\r\n  const listFriendSearch = useSelector(\r\n    (state: RootState) => state.chat.listFriendSearch\r\n  );\r\n\r\n  return (\r\n    <div className=\"list-fri\">\r\n      {listFriendSearch.map((fri) => (\r\n        <FriendItem\r\n          id={fri.id}\r\n          isSend={fri.isSend}\r\n          isFriend={fri.isFriend}\r\n          username={fri.username}\r\n          image={fri.image}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListFriend;\r\n","import React from \"react\";\r\nimport ListFriend from \"./component/listfriend/ListFriend\";\r\nimport \"./styles.scss\";\r\n\r\nconst Friend = () => {\r\n  return (\r\n    <div className=\"fri-page\">\r\n      <ListFriend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Friend;\r\n","import React from \"react\";\r\nimport {\r\n  RouteProps,\r\n  RouteComponentProps,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"app/store\";\r\n\r\ninterface IProps extends RouteProps {\r\n  component: React.ComponentType<RouteComponentProps<any>>;\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n  const isLoggedIn = useSelector((s: RootState) => s.login.isLoggedIn);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import Chat from \"features/chat\";\nimport Login from \"features/login\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport {\n  Route,\n  withRouter,\n  RouteComponentProps,\n  Switch,\n} from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"app/store\";\nimport accountApi from \"app/api/account\";\nimport {\n  checkCurrentFail,\n  checkCurrentSuccess,\n} from \"features/login/loginSlice\";\nimport { history } from \"index\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport \"./styles.scss\";\nimport Navigation from \"features/nav\";\nimport Friend from \"features/friend\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport { createMyRoom } from \"app/api/chat\";\n\nconst App: React.FC<RouteComponentProps> = () => {\n  const  appLoaded = useSelector((s: RootState) => s.login.appLoaded);\n\n  const dispath = useDispatch();\n\n  useEffect(() => {\n    accountApi\n      .getCurrent()\n      .then((value) => {\n        dispath(\n          checkCurrentSuccess({ userId: value.userId, image: value.image })\n        );\n\n        createMyRoom(value.userId);\n      })\n      .catch((err) => {\n        dispath(checkCurrentFail());\n        history.push(\"/\");\n      });\n  }, []);\n\n  if (!appLoaded) return <LoadingComponent content=\"Loading app...\" />;\n\n  return (\n    <div id=\"app\">\n      <Route path=\"/\" component={Login} exact={true} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <Navigation />\n            <Switch>\n              <PrivateRoute component={Chat} path=\"/chat\" />\n              <PrivateRoute component={Friend} path=\"/friend\" />\n            </Switch>\n          </Fragment>\n        )}\n      />\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/layout/App\";\nimport store from \"app/store\";\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}